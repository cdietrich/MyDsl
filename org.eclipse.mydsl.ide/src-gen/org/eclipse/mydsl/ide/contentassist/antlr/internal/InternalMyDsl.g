/*
 * generated by Xtext 2.19.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.eclipse.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getEigenschaftenAssignment()); }
		(rule__Model__EigenschaftenAssignment)*
		{ after(grammarAccess.getModelAccess().getEigenschaftenAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEigenschaft
entryRuleEigenschaft
:
{ before(grammarAccess.getEigenschaftRule()); }
	 ruleEigenschaft
{ after(grammarAccess.getEigenschaftRule()); } 
	 EOF 
;

// Rule Eigenschaft
ruleEigenschaft 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEigenschaftAccess().getGroup()); }
		(rule__Eigenschaft__Group__0)
		{ after(grammarAccess.getEigenschaftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Eigenschaft__Group__0__Impl
	rule__Eigenschaft__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEigenschaftAccess().getEigenschaftKeyword_0()); }
	'eigenschaft'
	{ after(grammarAccess.getEigenschaftAccess().getEigenschaftKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Eigenschaft__Group__1__Impl
	rule__Eigenschaft__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEigenschaftAccess().getNameAssignment_1()); }
	(rule__Eigenschaft__NameAssignment_1)
	{ after(grammarAccess.getEigenschaftAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Eigenschaft__Group__2__Impl
	rule__Eigenschaft__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEigenschaftAccess().getGroup_2()); }
	(rule__Eigenschaft__Group_2__0)?
	{ after(grammarAccess.getEigenschaftAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Eigenschaft__Group__3__Impl
	rule__Eigenschaft__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEigenschaftAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getEigenschaftAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Eigenschaft__Group__4__Impl
	rule__Eigenschaft__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEigenschaftAccess().getAttributesAssignment_4()); }
	(rule__Eigenschaft__AttributesAssignment_4)*
	{ after(grammarAccess.getEigenschaftAccess().getAttributesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Eigenschaft__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEigenschaftAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getEigenschaftAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Eigenschaft__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Eigenschaft__Group_2__0__Impl
	rule__Eigenschaft__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEigenschaftAccess().getExtendsKeyword_2_0()); }
	'extends'
	{ after(grammarAccess.getEigenschaftAccess().getExtendsKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Eigenschaft__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEigenschaftAccess().getSuperTypeAssignment_2_1()); }
	(rule__Eigenschaft__SuperTypeAssignment_2_1)
	{ after(grammarAccess.getEigenschaftAccess().getSuperTypeAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getTypeAssignment_0()); }
	(rule__Attribute__TypeAssignment_0)
	{ after(grammarAccess.getAttributeAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getArrayAssignment_1()); }
	(rule__Attribute__ArrayAssignment_1)?
	{ after(grammarAccess.getAttributeAccess().getArrayAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__2__Impl
	rule__Attribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getNameAssignment_2()); }
	(rule__Attribute__NameAssignment_2)
	{ after(grammarAccess.getAttributeAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getAttributeAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__EigenschaftenAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getEigenschaftenEigenschaftParserRuleCall_0()); }
		ruleEigenschaft
		{ after(grammarAccess.getModelAccess().getEigenschaftenEigenschaftParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEigenschaftAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEigenschaftAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__SuperTypeAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEigenschaftAccess().getSuperTypeEigenschaftCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getEigenschaftAccess().getSuperTypeEigenschaftIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getEigenschaftAccess().getSuperTypeEigenschaftIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getEigenschaftAccess().getSuperTypeEigenschaftCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Eigenschaft__AttributesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEigenschaftAccess().getAttributesAttributeParserRuleCall_4_0()); }
		ruleAttribute
		{ after(grammarAccess.getEigenschaftAccess().getAttributesAttributeParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getTypeEigenschaftCrossReference_0_0()); }
		(
			{ before(grammarAccess.getAttributeAccess().getTypeEigenschaftIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAttributeAccess().getTypeEigenschaftIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getAttributeAccess().getTypeEigenschaftCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ArrayAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_1_0()); }
		(
			{ before(grammarAccess.getAttributeAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_1_0()); }
			'[]'
			{ after(grammarAccess.getAttributeAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_1_0()); }
		)
		{ after(grammarAccess.getAttributeAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
